"use strict";

exports.__esModule = true;
exports.buildRootChain = buildRootChain;
exports.buildPresetChain = void 0;

var _path = _interopRequireDefault(require("path"));

var _micromatch = _interopRequireDefault(require("micromatch"));

var _debug = _interopRequireDefault(require("debug"));

var _options = require("./validation/options");

var _files = require("./files");

var _caching = require("./caching");

var _configDescriptors = require("./config-descriptors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = (0, _debug.default)("babel:config:config-chain");
var buildPresetChain = (0, _caching.makeWeakCache)(function (_ref) {
  var dirname = _ref.dirname,
      options = _ref.options,
      alias = _ref.alias;
  var result = (0, _configDescriptors.createUncachedDescriptors)(dirname, options, alias);
  var plugins = result.plugins,
      presets = result.presets;
  return {
    plugins: plugins(),
    presets: presets(),
    options: [normalizeOptions(result.options)]
  };
});
exports.buildPresetChain = buildPresetChain;

function buildRootChain(cwd, opts, envName) {
  var context = {
    filename: opts.filename ? _path.default.resolve(cwd, opts.filename) : null,
    cwd: cwd,
    envName: envName
  };
  var programmaticChain = loadProgrammaticChain({
    options: opts,
    dirname: context.cwd
  }, context);
  if (!programmaticChain) return null;
  var fileChain = emptyChain();

  if (opts.babelrc !== false && context.filename !== null) {
    var _filename = context.filename;
    var babelrcFile = (0, _files.findBabelrc)(_filename, context.envName);

    if (babelrcFile) {
      var result = loadFileChain(babelrcFile, context);
      if (!result) return null;
      mergeChain(fileChain, result);
    }

    var babelignoreFile = (0, _files.findBabelignore)(_filename);

    if (babelignoreFile && shouldIgnore(context, babelignoreFile.ignore, null, babelignoreFile.dirname)) {
      return null;
    }
  }

  var chain = mergeChain(mergeChain(emptyChain(), fileChain), programmaticChain);
  return {
    plugins: dedupDescriptors(chain.plugins),
    presets: dedupDescriptors(chain.presets),
    options: chain.options.map(function (o) {
      return normalizeOptions(o);
    })
  };
}

var loadProgrammaticChain = makeChainWalker({
  init: function init(arg) {
    return arg;
  },
  root: function root(input) {
    return buildRootDescriptors(input, "base", _configDescriptors.createCachedDescriptors);
  },
  env: function env(input, envName) {
    return buildEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, envName);
  }
});
var loadFileChain = makeChainWalker({
  init: function init(input) {
    return validateFile(input);
  },
  root: function root(file) {
    return loadFileDescriptors(file);
  },
  env: function env(file, envName) {
    return loadFileEnvDescriptors(file)(envName);
  }
});
var validateFile = (0, _caching.makeWeakCache)(function (file) {
  return {
    filepath: file.filepath,
    dirname: file.dirname,
    options: (0, _options.validate)("file", file.options)
  };
});
var loadFileDescriptors = (0, _caching.makeWeakCache)(function (file) {
  return buildRootDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors);
});
var loadFileEnvDescriptors = (0, _caching.makeWeakCache)(function (file) {
  return (0, _caching.makeStrongCache)(function (envName) {
    return buildEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, envName);
  });
});

function buildRootDescriptors(_ref2, alias, descriptors) {
  var dirname = _ref2.dirname,
      options = _ref2.options;
  return descriptors(dirname, options, alias);
}

function buildEnvDescriptors(_ref3, alias, descriptors, envName) {
  var dirname = _ref3.dirname,
      options = _ref3.options;
  var opts = options.env && options.env[envName];
  return opts ? descriptors(dirname, opts, alias + ".env[\"" + envName + "\"]") : null;
}

function makeChainWalker(_ref4) {
  var init = _ref4.init,
      root = _ref4.root,
      env = _ref4.env;
  return function (arg, context, files) {
    if (files === void 0) {
      files = new Set();
    }

    var input = init(arg);
    var dirname = input.dirname;
    var flattenedConfigs = [];
    var rootOpts = root(input);
    flattenedConfigs.push(rootOpts);
    var envOpts = env(input, context.envName);

    if (envOpts) {
      flattenedConfigs.push(envOpts);
    }

    if (flattenedConfigs.some(function (_ref5) {
      var _ref5$options = _ref5.options,
          ignore = _ref5$options.ignore,
          only = _ref5$options.only;
      return shouldIgnore(context, ignore, only, dirname);
    })) {
      return null;
    }

    var chain = emptyChain();

    for (var _i = 0; _i < flattenedConfigs.length; _i++) {
      var op = flattenedConfigs[_i];

      if (!mergeExtendsChain(chain, op.options, dirname, context, files)) {
        return null;
      }

      mergeChainOpts(chain, op);
    }

    return chain;
  };
}

function mergeExtendsChain(chain, opts, dirname, context, files) {
  if (opts.extends === undefined) return true;
  var file = (0, _files.loadConfig)(opts.extends, dirname, context.envName);

  if (files.has(file)) {
    throw new Error("Configuration cycle detected loading " + file.filepath + ".\n" + "File already loaded following the config chain:\n" + Array.from(files, function (file) {
      return " - " + file.filepath;
    }).join("\n"));
  }

  files.add(file);
  var fileChain = loadFileChain(file, context, files);
  files.delete(file);
  if (!fileChain) return false;
  mergeChain(chain, fileChain);
  return true;
}

function mergeChain(target, source) {
  var _target$options, _target$plugins, _target$presets;

  (_target$options = target.options).push.apply(_target$options, source.options);

  (_target$plugins = target.plugins).push.apply(_target$plugins, source.plugins);

  (_target$presets = target.presets).push.apply(_target$presets, source.presets);

  return target;
}

function mergeChainOpts(target, _ref6) {
  var _target$plugins2, _target$presets2;

  var options = _ref6.options,
      plugins = _ref6.plugins,
      presets = _ref6.presets;
  target.options.push(options);

  (_target$plugins2 = target.plugins).push.apply(_target$plugins2, plugins());

  (_target$presets2 = target.presets).push.apply(_target$presets2, presets());

  return target;
}

function emptyChain() {
  return {
    options: [],
    presets: [],
    plugins: []
  };
}

function normalizeOptions(opts) {
  var options = Object.assign({}, opts);
  delete options.extends;
  delete options.env;
  delete options.plugins;
  delete options.presets;
  delete options.passPerPreset;
  delete options.ignore;
  delete options.only;

  if (options.sourceMap) {
    options.sourceMaps = options.sourceMap;
    delete options.sourceMap;
  }

  return options;
}

function dedupDescriptors(items) {
  var map = new Map();
  var descriptors = [];

  for (var _iterator = items, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
    var _ref7;

    if (_isArray) {
      if (_i2 >= _iterator.length) break;
      _ref7 = _iterator[_i2++];
    } else {
      _i2 = _iterator.next();
      if (_i2.done) break;
      _ref7 = _i2.value;
    }

    var _item = _ref7;

    if (typeof _item.value === "function") {
      var fnKey = _item.value;
      var nameMap = map.get(fnKey);

      if (!nameMap) {
        nameMap = new Map();
        map.set(fnKey, nameMap);
      }

      var desc = nameMap.get(_item.name);

      if (!desc) {
        desc = {
          value: null
        };
        descriptors.push(desc);
        if (!_item.ownPass) nameMap.set(_item.name, desc);
      }

      if (_item.options === false) {
        desc.value = null;
      } else {
        desc.value = _item;
      }
    } else {
      descriptors.push({
        value: _item
      });
    }
  }

  return descriptors.reduce(function (acc, desc) {
    if (desc.value) acc.push(desc.value);
    return acc;
  }, []);
}

function shouldIgnore(context, ignore, only, dirname) {
  if (context.filename === null) return false;
  var ctx = context;

  if (ignore) {
    if (matchesPatterns(ctx, ignore, dirname)) {
      debug("Ignored %o because it matched one of %O from %o", context.filename, ignore, dirname);
      return true;
    }
  }

  if (only) {
    if (!matchesPatterns(ctx, only, dirname)) {
      debug("Ignored %o because it failed to match one of %O from %o", context.filename, only, dirname);
      return true;
    }
  }

  return false;
}

function matchesPatterns(context, patterns, dirname) {
  var res = [];
  var strings = [];
  var fns = [];
  patterns.forEach(function (pattern) {
    if (typeof pattern === "string") strings.push(pattern);else if (typeof pattern === "function") fns.push(pattern);else res.push(pattern);
  });
  var filename = context.filename;
  if (res.some(function (re) {
    return re.test(context.filename);
  })) return true;
  if (fns.some(function (fn) {
    return fn(filename);
  })) return true;

  if (strings.length > 0) {
    var possibleDirs = getPossibleDirs(context);
    var absolutePatterns = strings.map(function (pattern) {
      var negate = pattern[0] === "!";
      if (negate) pattern = pattern.slice(1);
      return (negate ? "!" : "") + _path.default.resolve(dirname, pattern);
    });

    if ((0, _micromatch.default)(possibleDirs, absolutePatterns, {
      nocase: true
    }).length > 0) {
      return true;
    }
  }

  return false;
}

var getPossibleDirs = (0, _caching.makeWeakCache)(function (context) {
  var current = context.filename;
  if (current === null) return [];
  var possibleDirs = [current];

  while (true) {
    var previous = current;
    current = _path.default.dirname(current);
    if (previous === current) break;
    possibleDirs.push(current);
  }

  return possibleDirs;
});